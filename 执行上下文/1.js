/*
  1、执行环境
  执行环境指的是当前JS代码被解析和执行时所在的环境

  共包含三种：
  （1）、全局执行环境：只有一个，在Web浏览器中，全局执行环境被任务是 window对象
  （2）、函数执行环境：只有在函数被调用时才会被创建，每次调用函数时都会创建一个新的执行环境
  （3）、Eval执行环境：指的是运行在 eval()函数中的代码，为防止字符串代码被人恶意修改，不建议使用

  1-1、执行环境栈
  执行环境栈用于存放在代码执行时创建的所有执行环境，其特点是LIFO(Last In First Out，后进先出)

  首次运行JS代码时会创建一个全局执行环境并推入到执行环境栈中。然后当某个函数被调用时，就会为该函数创建一个对应的函数执行环境并依次推入到执行环境栈的顶部

  根据执行环境栈LIFO的特点，当栈顶的函数执行完毕以后，其对应的函数执行环境就会从执行环境弹出，执行环境的控制权就会被移动到栈中的下一个执行环境

  var str = 'global variable';

  function fn1() {
    console.log('start excuting fn1');

    fn2();

    console.log('excuting fn1 again');
  }

  function fn2() {
    console.log('excuting fn2');
  }

  fn1();

  console.log('execution context over');

  // start excuting fn1
  // excuting fn2
  // excuting fn1 again
  // execution context over

  例中执行环境栈的变化如图1所示

  1-2、执行环境的创建
  执行环境的创建分为两个阶段：创建阶段和执行阶段
  创建阶段：主要是确定this的指向，以及构建词法环境和变量环境
  （1）、this指向
  全局执行环境：在web浏览器中，this指向window对象；在node.js中，this指向这个文件的module对象
  函数执行环境：this指向取决于函数的调用方式

  （2）、词法环境
  词法环境有两个组成部分：
  环境记录：存储变量和函数声明的实际位置
  对外部环境的引用：可以访问其外部的词法环境

  词法环境有两种类型：
  全局环境：是一个没有外部环境的词法环境，其外部环境引用为null。全局环境拥有一个全局对象window，其中包括了用户自定义的全局变量
  函数环境：用户在函数中定义的变量被存储在函数环境中，也包括函数的参数arguments对象。对外部环境的引用可以是全局环境，也可以是包含内部环境的外部环境

  var a = 'hello';
  function fn() {
    var b = 'world';
  }
  fn();
  // 如图2

  （3）、变量环境
  变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性
  在es6中，词法环境和变量环境的区别在于词法环境用于存储函数声明和变量（let和const）绑定，而变量环境**仅用于**存储变量（var）绑定

  let a = 1;
  const b = 2;
  var c = 3;

  function fn(d, e) {
    var g = 4;
    return d * e * g;
  }

  fn(5, 6);
  // 如图3

  从图中也可以变量提升的原因：在创建阶段，var声明的变量有初始值undefined，而let和const未赋初始值，所以就不存在变量提升  

  执行阶段：
  完成对所有变量的赋值分配，然后自上而下依次执行代码。此时，如果找不到let声明变量的值，这时才为其赋值为undefined

*/

  
  
  